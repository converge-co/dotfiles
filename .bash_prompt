# Explanation of the problem with line-wrapping issues:
# The problem was that Bash has espace sequences \[ and \] to tell Bash not to count a range of characters for 
# line wrapping purposes, but these sequences are only evalued when assigning to the PS1, PS2, or PS4 variables--
# so the prompt_git function needed to be evaluated each time before being appended to PS1, instead of being evaluated in PS1.

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM='xterm-256color';
fi;

prompt_git() {
  local color="${green}";
  local status='';
  local branchName='';
  local gitStatus='';
  local remote='';
  local remotePattern='';

  # Check if the current directory is in a Git repository.
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      # Ensure the index is up to date.
      git update-index --really-refresh -q &>/dev/null;

      # Check for uncommitted changes in the index.
      if ! $(git diff --quiet --ignore-submodules --cached); then
        color="${orange}";
      fi;

      # Check for unstaged changes.
      if ! $(git diff-files --quiet --ignore-submodules --); then
        color="${red}";
      fi;

      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        status+='?';
      fi;

      # Check for stashed files.
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        status+='S';
      fi;

    fi;

    # Capture the output of the "git status" command.
    gitStatus="$(git status 2> /dev/null)";

    # Set arrow icon based on status against remote.
    remote="!!!#{gitStatus}";
    remotePattern=".*Your branch is (.*) of.*"
    if [[ ${gitStatus} =~ ${remotePattern} ]]; then
      remote="Y";
      if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
        remote="↑";
      else
        remote="↓";
      fi
    else
      remote="";
    fi
    
    remotePattern="# Your branch and (.*) have diverged"
    if [[ ${gitStatus} =~ ${remotePattern} ]]; then
      remote="↕";
    fi

    # Get the short symbolic ref.
    # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo -n '(unknown)')";

    [ -n "${status}" ] && status=" \[${darkred}\][${status}]";
    [ -n "${remote}" ] && remote="\[${blue}\]$remote";

    echo -n " \[${color}\](${branchName})${remote}${status}";
  else
    return;
  fi;
}

if tput setaf 1 &> /dev/null; then
  tput sgr0; # reset colors
  bold=$(tput bold);
  reset=$(tput sgr0);
  # Solarized colors, taken from http://git.io/solarized-colors.
  black=$(tput setaf 0);
  blue=$(tput setaf 33);
  cyan=$(tput setaf 37);
  green=$(tput setaf 64);
  orange=$(tput setaf 166);
  purple=$(tput setaf 125);
  darkred=$(tput setaf 88);
  red=$(tput setaf 124);
  violet=$(tput setaf 61);
  white=$(tput setaf 15);
  gray=$(tput setaf 239);
  yellow=$(tput setaf 136);
else
  bold='';
  reset="\033[0m";
  black="\033[1;30m";
  blue="\033[1;34m";
  cyan="\033[1;36m";
  green="\033[1;32m";
  orange="\033[1;33m";
  purple="\033[1;35m";
  darkred="\033[0;31m";
  red="\033[1;31m";
  violet="\033[1;35m";
  gray="\033[0;37m";
  white="\033[1;37m";
  yellow="\033[1;33m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
  userStyle="${orange}";
else
  userStyle="${gray}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
  hostStyle="${bold}${red}";
else
  hostStyle="${gray}";
fi;
#
# Set the terminal title to the current working directory.
set_prompt() {
  PS1="\[${userStyle}\]\u"; # username
  PS1+="\[${gray}\]@";
  PS1+="\[${hostStyle}\]\h "; # host
  PS1+="\[${white}\]\w"; # working directory
  PS1+="$(prompt_git)"; # Git repository details
  PS1+="\[${white}\] \$ \[${reset}\]"; # `$` (and reset color)
  export PS1;
}
export PROMPT_COMMAND=set_prompt;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
